"0","library(gtrendsR)"
"0","# Functions to pull multiple samples of a query, build a list of all data,"
"0","# extract interest over time, yield a tibble of useful data and save both to file"
"0","####################################################################################"
"0","stamp_string <- function(...){"
"0","    now(tzone = ""America/Chicago"") %>%"
"0","    str_replace_all(., ""[\\-\\:]"", """") %>%"
"0","    str_replace_all(., ""[\\s]"", ""_"")"
"0","}"
"0","# Multiple pulls of the same query: yields timestamped list"
"0","gtrends_loop_pull <- function(q, n=20, time, geo=c(""US""), s=2){"
"0","    "
"0","    require(tidyverse)"
"0","    require(lubridate)"
"0","    require(stringr)"
"0","    library(gtrendsR)"
"0","    "
"0","    # Make timestamp string"
"0","    stamp <- stamp_string()"
"0","    "
"0","    #Instantiate list; message: list name"
"0","    list_name <- paste0(""gtrends_pull_"", stamp)"
"0","    gtrends_list <- list()"
"0","    message(""List name:"", list_name)"
"0","    "
"0","    for (i in 1:n){"
"0","        # Pull gtrends"
"0","        pull <- gtrends(q, geo = geo, time = time)"
"0","        "
"0","        # Add timestamp for the pull object"
"0","        pull[['stamp']] <- now(tzone = ""America/Chicago"")"
"0","        "
"0","        # Number the pull object"
"0","        pull_serial <- paste0(""pull"", i)   "
"0","        gtrends_list[[pull_serial]] <- pull"
"0","        "
"0","        # Message: pulling"
"0","        message(paste0(""Pulling "", i, "" ("", pull[['stamp']], "")"")) "
"0","        "
"0","        Sys.sleep(s) # So as not to get rate limited / banned"
"0","        }"
"0","        "
"0","    assign(list_name, gtrends_list)"
"0","        "
"0","    get(list_name) # ?"
"0","}"
"0","# Yields merged table (as tibble) of interest over time"
"0","gtrends_data_merge <- function(gtrends_list){"
"0","    # Extract the data, name each col for the pull #, join together"
"0","    gtrends_list %>%"
"0","    transpose() %>%"
"0","    .[['interest_over_time']] %>%"
"0","    lmap(~{"
"0","        el_name <- names(.)"
"0","        names(.[[1]])[2] <- el_name"
"0","        tibble(.)"
"0","    }) %>%"
"0","    map(~.[[1]]) %>%"
"0","    map(~.[1:3]) %>%"
"0","    reduce(full_join)"
"0","}"
